// CONFIGURATION FILE

// Pipeline parameter default values, can be modified by user when calling pipeline on command line (e.g. --ont_reads_fq sample_1.fastq) ##

// Input unzipped "raw" ONT output files
params.path = 'None'

// Input fastq reads
params.ont_reads_fq = 'None'

// Input sequencing summary files
params.ont_reads_txt = 'None'

// Input reference fasta file
params.ref = 'None' 

// Input bed file for housekeeping genes (RSEQc)
params.housekeeping = 'None' 

// Input GTF/GFF genomic annotation
params.annotation = 'None' 

// Output directory for pipeline results
params.out_dir = "output_directory/" 

// Logical, is the reference CHM13?
params.is_chm13 = false 

// directory of basecalling data
params.basecall_path = 'None' 

// Want to concatenate ERCC GTF to CHM13 GFF? Add the ERCC gtf file here
params.ercc = "None" 

// cDNA sequencing kit adapters for Pychopper to trim and orient reads
params.cdna_kit = "PCS111" 

// MultiQC configuration file
params.multiqc_config = "None" 

// Logical, do you want to perform discovery using Bambu? True = Yes
params.is_discovery = "None" 

// NDR value for Bambu novel discovery filtering - Leave it on Auto for most applications
params.NDR = "auto" 

// Logical, Track Bambu read assignments. True = Track. Tracking uses more memory, but allows you to extract reads that align to specific transcripts
params.track_reads = false 

// MAPQ filtering threshold for bam files, 0 for no filtering
params.mapq = "0" 

// Which step of the pipeline to perform. 1 = Basecalling, 2 = Pre-processing, 3 = Discovery and quantification
params.step = "None" 

// Directory with MultiQC input for making report.
params.multiqc_input = "None" 

// Directory containing RDS files
params.bambu_rds = "None" 

// Index file for reference genome
params.fai = "None" 

// Unfiltered bam file input if you want to start from the bam filtering step
params.bam = "None" 

// Unfiltered bam index file input if you want to start from the bam filtering step
params.bai = "None" 

// Binary boolean parameter to check if user is performing Direct RNAseq analysis
params.is_dRNA = false

// Reference file for contamination analysis
params.contamination_ref = "None"

// Quality score threshold
params.qscore_thresh = "9"

// Trim dRNA adapters and primers?
params.trim_dRNA = false

// Desired basecall speed 
params.basecall_speed = "hac"

// Desired basecaller modifications
params.basecall_mods = false

// Desired basecall configuration
params.basecall_config = "None"

// Type of read trimming during basecalling ("all", "primers", "adapters", "none")
params.basecall_trim = "none"

// Basecalling demultiplexing
params.basecall_demux = false

// CPU vs GPU basecalling
params.basecall_compute = "gpu"

// Trime barcodes (only counts if demultiplexing is enabled)
params.trim_barcode = "True"

// Intermediate QC reports
params.intermediate_qc = "None"

// Add prefix to all output files
params.prefix = "None"

// Perform RSEQC TIN?
params.rseqc_tin = false


process { 

    // Define job scheduler parameters for jobs that require little memory computation/memory ##

    withLabel: tiny {
        executor='slurm'
        clusterOptions='--partition normal --time 00:15:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 4 --mem-per-cpu 4G'
    }



    withLabel: small {
        executor='slurm'
        clusterOptions='--partition normal --time 1:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 8 --mem-per-cpu 4G'
    }



    // Define job scheduler parameters for jobs that require medium computation/memory ##

    withLabel: medium_small {
        
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 12 --mem-per-cpu 4G'
        }


    withLabel: medium {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 16 --mem-per-cpu 4G'
        }

    withLabel: medium_large {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 20 --mem-per-cpu 4G'
    }

    // Define job scheduler parameters for jobs that require lots of computation/memory ##

    withLabel: large {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 50 --mem-per-cpu 4G' 
    }
    
    withLabel: rseqc {
        executor='slurm'
        clusterOptions='--partition normal --time 7-00:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 50 --mem-per-cpu 4G' 
    }
 

    withLabel: bambu_prep_job {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 12 --mem-per-cpu 16G'
        }

    withLabel: huge {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 1 --mem-per-cpu 500G'
    }

    withLabel: contamination {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 50 --mem-per-cpu 10G'
    }

    // Define local execution

    withLabel: local {
        executor='local'
    }

    withLabel: gpu {
        
        executor='slurm'
        clusterOptions='--partition P4V12_SKY32M192_L --time 7-00:00:00 --account gol_mteb223_uksr --gres=gpu:1 --mem 16G'
        containerOptions = '--nv'
    }
    
    // Define cluster options for BAMBU_DUSCOVERY and BAMBU_QUANT
    withLabel: huge_long {
        executor='slurm'
        clusterOptions='--partition normal --time 7-00:00:00 --account coa_mteb223_uksr --nodes 1 --mem-per-cpu 40G --ntasks 1 --cpus-per-task 12'
    }

    // Define the singularity containers for each process, will pull containers from the cloud

    // Nanopore
    withName: "(TRIM_dRNA|MAKE_FAI|FIX_SEQUENCING_SUMMARY_NAME|UNZIP_AND_CONCATENATE|MAP_CONTAMINATION_dRNA|MAP_CONTAMINATION_cDNA|GFFCOMPARE|MAKE_INDEX_cDNA|MAKE_INDEX_dRNA|MINIMAP2_cDNA|MINIMAP2_dRNA|MINIMAP2_QC|FILTER_BAM|PYCHOPPER|MAKE_TRANSCRIPTOME|MAKE_INDEX_cDNA_CONTAMINATION_CHM13|MAKE_INDEX_dRNA_CONTAMINATION_CHM13)" {
        container = "library://ebbertlab-madeline/pip_single_cell/nanopore:sha256.80d11d0c1550956f3a44332e51ee9c4712d939d212024fd1293975dc324c1c20"
   }

    // Quality Control
    withName: "(MERGE_QC_REPORT|MAKE_QC_REPORT_TRIM|MAKE_QC_REPORT_NO_TRIM|MULTIQC_GRCh38|MULTIQC_CHM13|RSEQC_TIN|RSEQC_GENE_BODY_COVERAGE|RSEQC_BAM_STAT|RSEQC_READ_GC|CONVERT_GTF_TO_BED12|RSEQC_JUNCTION_ANNOTATION|RSEQC_JUNCTION_SATURATION|RSEQC_READ_DISTRIBUTION|PYCOQC|PYCOQC_dRNA|DECOMPRESS|TRIM_GALORE|CHM13_GTF_ERCC|CHM13_GTF)" {
        container = "library://ebbertlab-madeline/pip_single_cell/quality_control:sha256.303598cdb11777068e57a9afb9f916bc9b33d765f7c09166903f290c5541cc71"
    }

    // Basecalling
    withName: "(FAST5_to_POD5|BASECALL_CPU|BASECALL_CPU_DEMUX|BASECALL_GPU|BASECALL_GPU_DEMUX)" {
        container = "library://ebbertlab-madeline/pip_single_cell/dorado:sha256.93fc58c931ac05d43297eb82e4de0a6e2c73e683153b0b6a2c42e39f3f1f2502"
    }

    // Bambu
    withName: "(BAMBU_PREP|BAMBU_DISCOVERY|BAMBU_QUANT)" {
        container = "library://ebbertlab-madeline/pip_single_cell/bambu:sha256.57ac522a378ce28da6397819926f4185ed164382c4df2b1fff93d4c1d3a889b0"
    }

}


// Define executor type and maximum queue size for jobs at once ##

executor {

    name="slurm"
    queueSize = 50
}

// Point to singularity image with the tools necessary to run the pipeline

singularity {
    
    enabled = true
}

